<template>
  <nav-bar title="添加收货地址" :back.sync="navBarBack" />
  <view class="p-addresses-form c-main c-main--has-nav-bar">
    <view class="c-block c-cells u-block-center">
      <view class="c-cells__item">
        <view class="n-field-label c-cells__item-body">收货人</view>
        <view class="c-cells__item-input">
          <input class="s4" placeholder="姓名" confirm-type="done" placeholder-style="color: #bbb;"
                 value="{{formData.trueName}}" @input="input('trueName')" />
        </view>
        <view class="n-gender-tags s5">
          <view class="c-tag c-tag--text-third{{formData.gender === 1 ? ' active' : ''}}" @tap="select('gender', 1)">
            先生
          </view>
          <view class="c-tag c-tag--text-third{{formData.gender === 0 ? ' active' : ''}}" @tap="select('gender', 0)">
            女士
          </view>
        </view>
      </view>
      <view class="c-cells__item">
        <view class="n-field-label c-cells__item-body">联系电话</view>
        <view class="c-cells__item-input">
          <input class="s4" placeholder="收货人电话" confirm-type="done" placeholder-style="color: #bbb;"
                 type="number"
                 value="{{formData.mobPhone}}" @input="input('mobPhone')" />
        </view>
        <!--
        <view class="n-contact-list c2 s2">
          +通讯录
          <button open-type="getPhoneNumber" @getphonenumber="getPhoneNumber">啊</button>
        </view>
        -->
      </view>
      <view class="c-cells__item">
        <view class="n-field-label c-cells__item-body">收货地址</view>
        <view class="c-cells__item-input">
          <input class="s4" placeholder="小区/写字楼" confirm-type="done" placeholder-style="color: #bbb;"
                 value="{{formData.address}}"
                 @focus="navigateToSearchAddress" />
        </view>
      </view>
      <view class="c-cells__item">
        <view class="n-field-label c-cells__item-body">门牌号</view>
        <view class="c-cells__item-input">
          <input class="s4" placeholder="例：1号楼101室" confirm-type="done" placeholder-style="color: #bbb;"
                 value="{{formData.subAddress}}" @input="input('subAddress')" />
        </view>
      </view>
      <view class="c-cells__item">
        <view class="n-field-label c-cells__item-body">标签</view>
        <view class="n-tag c-cells__item-input s5">
          <view class="c-tag c-tag--text-third{{formData.tagType === 1 ? ' active' : ''}}" @tap="select('tagType', 1)">
            家
          </view>
          <view class="c-tag c-tag--text-third{{formData.tagType === 2 ? ' active' : ''}}" @tap="select('tagType', 2)">
            公司
          </view>
          <view class="c-tag c-tag--text-third{{formData.tagType === 3 ? ' active' : ''}}" @tap="select('tagType', 3)">
            学校
          </view>
        </view>
      </view>
    </view>
    <view class="c-button m-orange m-height-88 c7 s0" style="width: 690rpx;" @tap="submit">提交</view>
  </view>
</template>

<style lang="scss" src="./styles.scss"></style>

<script>
  import wepy from 'wepy'
  import global from '../../../mixins/global'
  import NavBar from '../../../components/nav-bar/index'
  import request from '../../../utils/request'
  import { helpers } from 'mp-client'

  export default class extends wepy.page {
    config = {
      navigationBarTitleText: ''
    }

    components = {
      'nav-bar': NavBar
    }

    mixins = [global]

    data = {
      navBarBack: true,
      formData: {
        gender: 0,
        mobPhone: '',
        province: '',
        city: '',
        district: '',
        tagType: undefined,
        subAddress: '',
        address: '',
        lng: '',
        lat: '',
        trueName: '',
        cityCode: ''
      },
      query: {
        from: '',
        id: ''
      }
    }

    async validate () {
      const { trueName, mobPhone, address, subAddress } = this.formData

      if (!trueName) {
        await wepy.showToast({
          icon: 'none',
          title: '收货人不能为空'
        })

        return false
      }

      if (!mobPhone) {
        await wepy.showToast({
          icon: 'none',
          title: '联系电话不能为空'
        })

        return false
      }

      if (!address) {
        await wepy.showToast({
          icon: 'none',
          title: '收货地址不能为空'
        })

        return false
      }

      if (!subAddress) {
        await wepy.showToast({
          icon: 'none',
          title: '门牌号不能为空'
        })

        return false
      }

      return true
    }

    methods = {
      input (field, e) {
        this.formData[field] = e.detail.value
      },
      select (field, value) {
        this.formData[field] = +value
      },
      async submit () {
        const validateRes = await this.validate()

        if (!validateRes) return

        try {
          await request({
            requiresLogin: true,
            url: 'address/saveAddress',
            data: this.query.id
              ? Object.assign(this.formData, { addressId: this.query.id })
              : this.formData
          })

          await wepy.showToast({
            icon: 'none',
            title: this.query.id ? '编辑成功' : '新增成功'
          })

          await helpers.sleep(2000)

          if (this.query.from === 'select-address') {
            wepy.navigateTo({ url: '/pages/addresses/select/index' })
          } else {
            wepy.navigateBack()
          }
        } catch (e) {
          wepy.showToast({
            icon: 'none',
            title: e.data.longMessage
          })
        }
      },
      getPhoneNumber (e) {
        console.log(e.detail.errMsg)
        console.log(e.detail.iv)
        console.log(e.detail.encryptedData)
      },
      navigateToSearchAddress () {
        wepy.navigateTo({ url: '/pages/addresses/more/index' })
      }
    }

    async onLoad (query) {
      this.query.from = query.from
      this.query.id = query.id

      this.$apply()

      wepy.setNavigationBarTitle({
        title: query.id ? '编辑收货地址' : '添加收货地址'
      })

      // 编辑状态
      if (query.id) {
        const {
          lng, lat, province, city, cityCode, district,
          trueName, gender, mobPhone, address, subAddress, tagType
        } = await request({
          url: 'address/getAddress',
          data: {
            addressId: query.id
          }
        })

        this.formData.lng = lng
        this.formData.lat = lat
        this.formData.province = province
        this.formData.city = city
        this.formData.cityCode = cityCode
        this.formData.district = district

        this.formData.trueName = trueName
        this.formData.gender = gender
        this.formData.mobPhone = mobPhone
        this.formData.address = address
        this.formData.subAddress = subAddress
        this.formData.tagType = tagType

        this.$apply()
      }
    }

    onShow () {
      if (this.$parent.globalData.selectedLocation) {
        const { lng, lat, province, city, district, address, cityCode } = this.$parent.globalData.selectedLocation

        this.formData.lng = lng
        this.formData.lat = lat
        this.formData.province = province
        this.formData.city = city
        this.formData.district = district
        this.formData.address = address
        this.formData.cityCode = cityCode

        this.$apply()
      } else {
        console.log(22)
        this.formData.lng = ''
        this.formData.lat = ''
        this.formData.province = ''
        this.formData.city = ''
        this.formData.district = ''
        this.formData.address = ''
        this.formData.cityCode = ''

        this.$apply()
      }
    }

    onUnload () {
      console.log(222)
      this.$parent.globalData.selectedLocation = null
    }
  }
</script>
