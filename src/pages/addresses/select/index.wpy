<template>
  <nav-bar title="选择收货地址" :back.sync="navBarBack" />
  <view class="p-addresses-select c-main c-main--has-nav-bar">
    <address-operation title="管理地址" url="/pages/addresses/manage/index" />
    <address-search class="l-box l-box--margin-bottom" :city.sync="city" @toggle.user="toggleCitySelector" />
    <city-selector @toggle.user="toggleCitySelector" hidden="{{!citySelectorVisible}}" />
    <view class="n-wrap" hidden="{{citySelectorVisible}}">
      <view class="n-addresses c-block">
        <view class="c-cells">
          <view class="c-cells__item">
            <view class="c-cells__item-body">当前地址</view>
            <view class="c-cells__item-body">
              <view class="n-reload-address c-tag c-tag--text-secondary c2 s5" @tap="reloadLocation">重新定位</view>
            </view>
          </view>
          <view class="c-cells__item">
            <view class="c-cells__item-body c3 s3">{{currentLocation.address}}</view>
          </view>
          <block wx:if="{{loggedIn}}">
            <view class="c-cells__item">
              <view class="c-cells__item-body">收货地址</view>
              <view class="c-cells__item-body">
                <view class="n-add-address c-tag c-tag--text-secondary c2 s5" @tap="navigateToAddAddress">
                  添加收货地址
                </view>
              </view>
            </view>
            <view class="c-results c-results--secondary" wx:if="{{!!myAddresses.length}}">
              <repeat for="{{myAddresses}}" item="item">
                <view class="c-results__item c3 s3" @tap="selectLocation({{item}})">
                  <view class="c-results__item-title">{{item.trueName}}　{{item.mobPhone}}</view>
                  <view class="c-results__item-extra">
                    <view class="n-tag c-tag c-tag--text-third c3 s6">
                      {{
                      item.tagType === 1
                      ? '家'
                      : item.tagType === 2
                      ? '公司'
                      : item.tagType === 3
                      ? '学校'
                      : '其他'
                      }}
                    </view>
                    <text>{{item.address}}</text>
                  </view>
                </view>
              </repeat>
            </view>
            <view class="n-no-data c1 s4" wx:else>目前没有收货地址哦！</view>
          </block>
          <view class="c-cells__item">
            <view class="c-cells__item-body">附近地址</view>
            <view class="c-cells__item-body">
              <view class="n-get-more-address c-tag c-tag--text-secondary c2 s5" @tap="navigateToMoreAddress">更多地址
              </view>
            </view>
          </view>
        </view>
        <view class="n-more-address c3 s3">
          <repeat for="{{nearbyLocations}}" item="item">
            <view class="n-more-address__item">{{item.address}}</view>
          </repeat>
        </view>
      </view>
    </view>
  </view>
</template>

<style lang="scss" src="./styles.scss"></style>

<script>
  import wepy from 'wepy'
  import global from '../../../mixins/global'
  import NavBar from '../../../components/nav-bar/index'
  import AddressSearch from '../../../components/address-search/index'
  import CitySelector from '../../../components/city-selector/index'
  import AddressOperation from '../../../components/address-operation/index'
  import location from '../../../utils/location'
  import request from '../../../utils/request'
  import auth from '../../../utils/auth'

  export default class extends wepy.page {
    config = {
      navigationBarTitleText: '选择收货地址'
    }

    components = {
      'nav-bar': NavBar,
      'address-search': AddressSearch,
      'city-selector': CitySelector,
      'address-operation': AddressOperation
    }

    mixins = [global]

    data = {
      navBarBack: true,
      city: '',
      citySelectorVisible: false,
      currentLocation: {},
      nearbyLocations: [],
      myAddresses: [],
      loggedIn: false
    }

    methods = {
      async reloadLocation () {
        try {
          await location.secureClear()
          this.renderLocations()
        } catch (e) {
          console.log(e)
        }
      },
      toggleCitySelector (city) {
        if (city) {
          this.city = city
        }
        this.citySelectorVisible = !this.citySelectorVisible
      },
      navigateToAddAddress () {
        wepy.navigateTo({ url: '/pages/addresses/form/index' })
      },
      navigateToMoreAddress () {
        wepy.navigateTo({ url: '/pages/addresses/more/index?from=select-address' })
      }
    }

    async renderLocations () {
      this.currentLocation = await location.getCurrentLocation()
      this.nearbyLocations = (await location.getNearbyLocations()).filter((item, index) => index < 3)
      this.$apply()
    }

    async onShow () {
      this.city = location.get()['city'] || ''
      this.loggedIn = auth.loggedIn()

      this.renderLocations()

      if (this.loggedIn) {
        const getMyAddresses = await request({
          url: 'address/getMyAddresses'
        })

        this.myAddresses = getMyAddresses
      }

      this.$apply()
    }
  }
</script>
