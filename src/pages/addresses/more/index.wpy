<template>
  <nav-bar title="更多地址" :back.sync="navBarBack" />
  <view class="p-addresses-more c-main c-main--has-nav-bar">
    <address-search modifier="secondary" :city.sync="city" @toggle.user="toggleCitySelector"
                    @focus.user="navigateToSearchAddress" />
    <city-selector @toggle.user="toggleCitySelector" hidden="{{!citySelectorVisible}}" />
    <view hidden="{{citySelectorVisible}}">
      <view class="n-map-wrap">
        <map
          id="map"
          latitude="{{latitude}}"
          longitude="{{longitude}}"
          show-location
          @regionchange="regionChange"
          wx:if="{{!!latitude}}"
        />
      </view>
      <view class="n-results-wrap">
        <view class="c-tabs border-bottom-1 c2 s2">
          <repeat for="{{types}}" item="item">
            <view class="c-tabs__item" @tap="getLocations({{item.code}})">
              <view class="c-tabs__item-wrap{{currentType === item.code ? ' is-active border-bottom-4' : ''}}">
                {{item.name}}
              </view>
            </view>
          </repeat>
        </view>
        <view class="c-results">
          <repeat for="{{nearbyLocations}}" item="item">
            <view class="c-results__item" @tap="selectLocation({{item}})">
              <view class="c-results__item-title c2 s3">{{item.name}}</view>
              <view class="c-results__item-extra c3 s4">{{item.address}}</view>
            </view>
          </repeat>
        </view>
      </view>
    </view>
  </view>
</template>

<style lang="scss" src="./styles.scss"></style>

<script>
  import wepy from 'wepy'
  import global from '../../../mixins/global'
  import NavBar from '../../../components/nav-bar/index'
  import AddressSearch from '../../../components/address-search/index'
  import CitySelector from '../../../components/city-selector/index'
  import map from '../../../utils/map'
  import location from '../../../utils/location'

  export default class extends wepy.page {
    config = {
      navigationBarTitleText: '更多地址'
    }

    components = {
      'nav-bar': NavBar,
      'address-search': AddressSearch,
      'city-selector': CitySelector
    }

    mixins = [global]

    data = {
      navBarBack: true,
      city: '',
      citySelectorVisible: false,
      nearbyLocations: [],
      currentType: '120201|120302|141200',
      types: [{
        name: '全部',
        code: '120201|120302|141200'
      }, {
        name: '写字楼',
        code: '120201'
      }, {
        name: '小区',
        code: '120302'
      }, {
        name: '学校',
        code: '141200'
      }],
      latitude: 0,
      longitude: 0,
      from: ''
    }

    methods = {
      toggleCitySelector (city) {
        if (city) {
          this.city = city
        }
        this.citySelectorVisible = !this.citySelectorVisible
      },
      async getLocations (code) {
        this.currentType = code
        this.getNearbyLocations()
      },
      regionChange (e) {
        if (e.type === 'end') {
          this.getNearbyLocations()
        }
      },
      selectLocation (location) {
        this.$parent.globalData.selectedLocation = location

        if (this.from) {
          wepy.navigateTo({ url: '/pages/add-address/index?from=select-address' })
        } else {
          wepy.navigateBack()
        }
      },
      navigateToSearchAddress () {
        wepy.navigateTo({ url: '/pages/search-address/index' })
      }
    }

    getNearbyLocations () {
      this.mapCtx.getCenterLocation({
        success: async res => {
          const { lng, lat, cityCode } = await map.getLocation({
            location: { lng: res.longitude, lat: res.latitude }
          })
          this.nearbyLocations = await location.getNearbyLocations({
            types: this.currentType,
            location: { lng, lat, cityCode }
          })
          this.$apply()
        }
      })
    }

    async onLoad (query) {
      this.from = query.from || ''
      this.mapCtx = wepy.createMapContext('map')
      const { lng, lat, city = '' } = location.get()
      this.longitude = lng
      this.latitude = lat
      this.city = city
      this.$apply()
      this.getNearbyLocations()
    }

    async onShow () {
      const { selectedLocation } = this.$parent.globalData

      if (selectedLocation) {
        const { lng, lat } = selectedLocation
        this.longitude = lng
        this.latitude = lat
        this.$apply()
        this.getNearbyLocations()
      }
    }
  }
</script>
