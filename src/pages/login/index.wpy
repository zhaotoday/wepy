<template>
  <view class="c-nav-bar c2 s0">
    <view class="c-icon c-icon--back" @tap="handleTapBack"></view>
    身边店
  </view>
  <view class="login c-main c-main--has-nav-bar">
    <view class="login-title s0">请先登录账号并授权</view>
    <view class="login-btn c-icon c-icon--mp-login">
      <view class="login-btn__text s2 c5">登录并授权</view>
      <button open-type="getUserInfo" lang="zh_CN" @getuserinfo="handleGetUserInfo">获取用户信息</button>
    </view>
    <view class="login-tip c3 s4">
      登录并授权即代表您已同意
      <text class="login-tip__protocol" @tap="handleTapProtocal">《身边店服务协议》</text>
    </view>
  </view>
</template>

<style lang="scss" src="./styles.scss"></style>

<script>
  import wepy from 'wepy'
  import global from '../../mixins/global'
  import auth from '../../utils/auth'
  import NavBar from '../../components/nav-bar/index'
  import { utils, helpers } from 'mp-client'

  export default class extends wepy.page {
    config = {
      navigationBarTitleText: ''
    }

    components = {
      'nav-bar': NavBar
    }

    mixins = [global]

    data = {
      hasNavBar: true,
      page: ''
    }

    computed = {}

    methods = {
      handleTapProtocal () {
        wepy.navigateTo({
          url: '/pages/content/index'
        })
      },

      handleTapBack () {
        this.goBack()
      },

      async handleGetUserInfo (e) {
        const getSettingRes = await wepy.getSetting()

        if (!getSettingRes.authSetting['scope.userInfo']) {
          this.goBack()
        } else {
          const userInfo = e.detail.userInfo

          auth.setUserInfo(userInfo)

          const loginRes = await auth.login()

          auth.setLoginToken(loginRes.key)

          await wepy.showToast({
            title: '登录并授权成功！',
            icon: 'none',
            mask: true
          })

          await helpers.sleep(2000)

          wepy.navigateBack()
        }
      }
    }

    onLoad (query) {
      this.page = query.page
    }

    async goBack () {
      const stopping = this.$parent.globalData.stopping
      const currentPages = utils.currentPages.getPages()

      const page = stopping
        ? currentPages[currentPages.length - 1]
        : currentPages[currentPages.length - 2]
      const url = page.url

      try {
        await wepy.switchTab({url})
      } catch (e) {
        await wepy.navigateBack({delta: (stopping ? 1 : 2)})
      }
    }
  }
</script>
