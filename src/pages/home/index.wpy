<template>
  <nav-bar title="身边店" :back.user="navBarBack"/>
  <view class="home c-main c-main--has-nav-bar">
    <!-- home-top-ads -->
    <view class="home-top-ads">
      <view>
        <c-swiper-top-ads :items.sync="topAds" width="100%" height="465rpx"/>
      </view>
      <address-picker :address.sync="address" @select-address.user="handleTapSelectAddress"/>
      <view class="c-icon c-icon--scan" @tap="handleTapScan"></view>
    </view>
    <!-- /home-top-ads -->
    <!-- home-categories -->
    <view class="home-categories c-categories">
      <repeat for="{{categories}}" item="item" index="index">
        <navigator url="/pages/recommended-shops/index?id={{item.id}}&name={{item.name}}">
          <view class="c-categories__item c2 s4">
            <image src="{{item.image}}" mode="aspectFill" @error="handleImageError" data-type="product"
                   data-object="categories" data-index="{{index}}"/>
            {{item.name}}
          </view>
        </navigator>
      </repeat>
    </view>
    <!-- /home-categories -->
    <!-- home-slogan -->
    <view class="home-slogan c1 s4">
      您身边的品牌
      <image src="./images/dot.png" mode="aspectFill"/>
      服务品牌的你
    </view>
    <!-- /home-slogan -->
    <!-- home-shops -->
    <view class="home-shops c-panel home-margin-top">
      <view class="c-panel__head c-panel__head--has-fringe c2 s1">
        身边店
        <view class="c-panel__head-addon c3 s5" @tap="handleTapAnotherBatch('shops')">换一批</view>
      </view>
      <view class="c-panel__body">
        <view class="l-list">
          <repeat for="{{shops}}" item="item" index="index">
            <view class="l-list__item">
              <view class="c-media">
                <image src="{{item.image}}" mode="aspectFill" @error="handleImageError" data-type="shop"
                       data-object="shops" data-index="{{index}}"/>
                <view class="c-media__body">
                  <view class="c-media__body-title c2 s2">{{item.name}}</view>
                  <view class="c-media__body-content c3 s4">{{item.introduction}}</view>
                </view>
              </view>
              <view class="c-tag c-tag--address c3 s6">{{item.distance}}</view>
            </view>
          </repeat>
        </view>
      </view>
    </view>
    <!-- /home-shops -->
    <!-- home-inserted-ads -->
    <view class="home-inserted-ads home-margin-top">
      <c-swiper-inserted-ads :items.sync="insertedAds" width="100%" height="246rpx"/>
    </view>
    <!-- /home-inserted-ads -->
    <view class="home-products c-panel home-margin-top">
      <view class="c-panel__head c-panel__head--has-fringe c2 s1">
        热品推荐
        <view class="c-panel__head-addon c3 s5" @tap="handleTapAnotherBatch('products')">换一批</view>
      </view>
      <view class="c-panel__body">
        <view class="l-cols">
          <repeat for="{{products}}" index="index" item="item">
            <navigator url="/pages/product/index?id={{item.id}}">
              <view class="l-cols__item">
                <image class="home-products__image" src="{{item.image}}" mode="aspectFill" @error="handleImageError"
                       data-type="product" data-object="products" data-index="{{index}}"/>
                <view class="home-products__title c2 s2">{{item.name}}</view>
                <rate :dataItem.sync="item"/>
              </view>
            </navigator>
          </repeat>
        </view>
      </view>
    </view>
  </view>
  <!--
  <modal-ad :item.sync="modalAd"/>
  -->
  <block wx:if="{{!!currentAddress}}">
    <address-selector :dataItem.sync="currentAddress" @get.user="get"/>
  </block>
</template>

<style lang="scss" src="./styles.scss"></style>

<script>
  import wepy from 'wepy'
  import global from '../../mixins/global'
  import request from '../../utils/request'
  import filters from '../../utils/filters'
  import NavBar from '../../components/nav-bar/index'
  import Swiper from '../../components/swiper/index'
  import Rate from '../../components/rate/index'
  import AddressPicker from '../../components/address-picker/index'
  import AddressSelector from '../../components/address-selector/index'
  import ModalAd from '../../components/modal-ad/index'
  import location from '../../utils/location'

  export default class extends wepy.page {
    config = {
      navigationBarTitleText: '身边店'
    }

    components = {
      'nav-bar': NavBar,
      'c-swiper-top-ads': Swiper,
      'c-swiper-inserted-ads': Swiper,
      'address-picker': AddressPicker,
      'address-selector': AddressSelector,
      rate: Rate,
      'modal-ad': ModalAd
    }

    mixins = [global]

    data = {
      navBarBack: false,
      address: '',
      topAds: [],
      insertedAds: [],
      categories: [],
      shops: [],
      products: [],
      modalAd: {},
      currentAddress: null
    }

    computed = {}

    methods = {
      async handleTapScan () {
        await wepy.scanCode({
          onlyFromCamera: true
        })
      },
      async handleTapAnotherBatch (type) {
        switch (type) {
          case 'shops':
            const homeGetOtherStoresRes = await request({
              url: 'home/getOtherStores'
            })
            this.shops = homeGetOtherStoresRes.stores.map(item => {
              return {
                id: item.storeId,
                name: item.storeName,
                image: item.storeLabel,
                introduction: item.storeIntro,
                distance: filters.distance(item.storeDistance)
              }
            })
            this.$apply()
            break

          case 'products':
            const homeGetOtherGoodsRes = await request({
              url: 'home/getOtherGoods'
            })
            this.products = homeGetOtherGoodsRes.goodsList.map(item => {
              return {
                id: item.goodsCommonId,
                name: item.goodsName,
                image: item.goodsImage,
                score: item.evalScore,
                rate: (item.evalScore / 2).toFixed(0)
              }
            })
            this.$apply()
            break
        }
      },
      get (options) {
        this.get(options)
      },
      handleTapSelectAddress () {
        this.showAddressSelector()
      }
    }

    events = {}

    async onShow () {
      try {
        const getCurrentLocationRes = await location.getCurrentLocation()
        this.get({
          requiresLocation: true,
          location: getCurrentLocationRes
        })
      } catch (e) {
        this.get()
      }
    }

    showAddressSelector () {
      this.$invoke('address-selector', 'show')
    }

    hideAddressSelector () {
      this.$invoke('address-selector', 'hide')
    }

    async get ({requiresLocation = false, location = {}} = {}) {
      const homeIndexRes = await request({
        url: 'home/index',
        requiresLocation
      })

      this.currentAddress = homeIndexRes.currentAddress

      if (requiresLocation) {
        if (homeIndexRes.currentAddress.choosedAddressFlag === 1) {
          this.address = homeIndexRes.currentAddress.addresses
            ? homeIndexRes.currentAddress.addresses[0].address
            : location.address
          this.hideAddressSelector()
        } else {
          this.showAddressSelector()

          if (!homeIndexRes.currentAddress.addresses) {
            this.address = location.address
          }
        }
      } else {
        this.showAddressSelector()
        this.address = '请选择收货地址'
      }

      this.topAds = homeIndexRes.advs.topAdvs.map(item => ({
        image: item.imageUrl,
        url: item.href || ''
      }))

      this.insertedAds = homeIndexRes.advs.middleAdvs.map(item => ({
        image: item.imageUrl,
        url: item.href || ''
      }))

      this.categories = homeIndexRes.recommendClasses.classes.map(item => ({
        id: item.gcId,
        name: item.gcName,
        image: item.gcImage
      }))

      this.shops = homeIndexRes.nearbyStores.stores.map(item => ({
        id: item.storeId,
        name: item.storeName,
        image: item.storeLabel,
        introduction: item.storeIntro,
        distance: filters.distance(item.storeDistance)
      }))

      this.products = homeIndexRes.recommendGoods.goodsList.map(item => ({
        id: item.goodsCommonId,
        name: item.goodsName,
        image: item.goodsImage,
        score: item.evalScore,
        rate: (item.evalScore / 2).toFixed(0)
      }))

      this.modalAd = (item => ({
        url: item.href || '',
        image: item.imageUrl || ''
      }))(homeIndexRes.advs.popUpAdv)

      this.$apply()
    }
  }
</script>
